{"version":3,"sources":["Search.js","Video.js","VideoList.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","event","term","target","value","setState","state","_this2","react_default","a","createElement","className","placeholder","onChange","onClick","Component","Player","renderVideo","video","videoID","id","videoId","videoURL","concat","title","src","snippet","channelTitle","description","VideoList","renderVideoList","videos","length","map","key","thumbnails","medium","url","alt","API_KEY","App","initPlayer","YTSearch","onVideoClickHandler","Search_Search","Video_Player","VideoList_VideoList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67895268.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Search extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: 'PRIPYAT'\r\n        }\r\n    }\r\n\r\n    onChangeHandler = (event) => {\r\n        let term = event.target.value;\r\n        this.setState({term});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n           <div>\r\n                <div className=\"search-bar\">\r\n                    <input placeholder=\"Search for videos\" onChange={this.onChangeHandler} />\r\n                    <button onClick={() => this.props.onClick(this.state.term)}>SEARCH</button>\r\n                    <div className=\"related-videos\">\r\n                        Videos You Might Like\r\n                    </div>\r\n                </div>\r\n           </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Player extends Component {\r\n\r\n    renderVideo = () => {\r\n        let video = this.props.video; \r\n        if(!video)\r\n            return <p>Loading....</p>\r\n        let videoID = video.id.videoId;\r\n        let videoURL = `https://www.youtube.com/embed/${videoID}`;\r\n        return (\r\n            <div className=\"video-container\">\r\n                <iframe title=\"Video\" src={videoURL} />\r\n                <div className=\"video-desc-main\">\r\n                    <div className=\"video-desc-main-title\">\r\n                        {video.snippet.title}\r\n                        <div className=\"video-desc-main-channel\">\r\n                            <span className=\"uploaded-by\">Uploaded by</span> {video.snippet.channelTitle}\r\n                        </div>\r\n                    </div>                 \r\n                </div><hr/>   \r\n                <div className=\"video-info\">\r\n                    <span><b>Description:</b></span>\r\n                    <p>{video.snippet.description}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderVideo()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class VideoList extends Component {\r\n\r\n    renderVideoList = () => {\r\n        let videos = this.props.videos;\r\n        if(videos.length === 0)\r\n            return (\r\n                <p>Please wait....</p>\r\n            )\r\n        return videos.map((video) => {\r\n            return (\r\n                <div key={video.id.videoId} className=\"video-box\" onClick={() => this.props.onClick(video)}>\r\n                   <div className=\"video-thumbnail\">   \r\n                        <img src={video.snippet.thumbnails.medium.url} alt=\"x\" />\r\n                   </div>\r\n                   <div className=\"video-desc\">\r\n                        <span className=\"video-title\">{video.snippet.title}</span><br/><br/>\r\n                        <span className=\"video-channel-outer\">by <span className=\"video-channel-inner\">{video.snippet.channelTitle}</span></span>\r\n                   </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"video-list\">\r\n                {this.renderVideoList()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport YTSearch from 'youtube-api-search';\nimport Search from './Search';\nimport Video from './Video';\nimport VideoList from './VideoList';\nimport './App.css';\n\nlet API_KEY = 'AIzaSyCL-oxDAj-y0Hu3fPpslewrx44b_gHmNJQ';\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: 'PRIPYAT',\n      videos: [],\n      video: null\n    }\n    this.initPlayer(this.state.term);\n  }\n\n  initPlayer = (term) => {\n    YTSearch({key: API_KEY, term}, (videos) => {\n      this.setState({videos, video: videos[0]});\n    });\n  }\n\n  onVideoClickHandler = (video) => {\n    this.setState({video});\n  } \n\n  onChangeHandler = (term) => {\n    this.initPlayer(term);\n  }\n\n  render() {\n    return (\n      <div className=\"main-container\">    \n        <Search onClick={this.onChangeHandler} />\n        <Video video={this.state.video} />    \n        <VideoList onClick={this.onVideoClickHandler} videos={this.state.videos} />    \n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}